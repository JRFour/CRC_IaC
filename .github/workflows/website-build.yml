name: "Website Deployment"

on:
  push:
    branches:
      - main
defaults:
  run:
    working-directory: prod

jobs:
  # Runs Snyk for SCA (Software Composition Analysis) in IaC
  snyk_sca:
    name: "Snyk SCA Scan"
    runs-on: [self-hosted]
    steps:
      - uses: actions/checkout@v4
      - name: Run Snyk to check manifest file for issues
        uses: snyk/actions/iac@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        continue-on-error: true

  # Runs Terraform to build out AWS infrastructure and DNS rules
  terraform_build:
    name: "Terraform AWS Build"
    runs-on: self-hosted
    needs: snyk_sca
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_KEY_ID }}
      AWS_REGION: us-east-1
      CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4

      - name: "Setup Terraform"
        uses: hashicorp/setup-terraform@v3

      - name: "Terraform Init"
        run: terraform init

      - name: "Terraform Plan"
        run: terraform plan -var="site_domain=${{ vars.SITE_NAME }}" -no-color
        continue-on-error: true

      - name: "Terraform Apply"
        run:  terraform apply -var="site_domain=${{ vars.SITE_NAME }}" -auto-approve

  # Pushes files in 'website' folder to S3 bucket
  deploy:
    name: "Push to AWS S3"
    runs-on: self-hosted
    needs: [terraform_build]  #, sonarcloud_sast]
    env:
      domain_name: ${{ needs.terraform_build.outputs.domain_name }}
    steps:
      - name: "Checkout"
        uses: actions/checkout@v4
      - name: "Setup AWS CLI"
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_ID }}
          aws-region: us-east-1
      - name: "Sync files to S3 bucket"
        run: |
          aws s3 sync ../website/ s3://${{ vars.SITE_NAME }} --delete

  # Runs OWASP ZAP Scan for web vulnerabilities
  zap_scan:
    runs-on: ubuntu-latest
    needs: deploy
    name: Run DAST scan on the web application
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          ref: master
      - name: ZAP Scan
        uses: zaproxy/action-baseline@v0.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          docker_name: 'ghcr.io/zaproxy/zaproxy:stable'
          target: 'https://${{ vars.SITE_NAME }}/'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'
